#!/usr/bin/env python
# encoding: utf-8

'''
Interposer script that first runs PoisSolver, takes relevant results, then runs 
HoppingDynamics.
'''

__author__      = 'Samuel Ng'
__copyright__   = 'Apache License 2.0'
__version__     = '0.1'
__date__        = '2019-03-08'  # last update

from argparse import ArgumentParser
import os.path
import siqadconn

class poisHoppingInterposer:
    '''This class encapsulates all the functionalities needed to call 
    PoisSolver and Hopping Dynamics, as well as make any data structure 
    translations needed. The same input problem file is passed to both 
    simulators, with possible alterations by this script before the invocation 
    of Hopping Dynamics'''

    def __init__(self):
        '''Initialize the class.'''
        self.parse_cml_args();
        self.extract_simulation_paths()

    def parse_cml_args(self):
        '''Parse command line arguments.'''

        def file_must_exist(fpath):
            '''Returns the input path unaltered if the file exists, else raises 
            an error.'''
            if not os.path.exists(fpath):
                raise argparse.ArgumentTypeError("{} does not exist".format(fpath))
            return fpath

        parser = ArgumentParser(description="Run PoisSolver and HoppingDynamics "
                "in sequence, with the latter using electric field data "
                " generated by the former.")
        parser.add_argument(dest="in_file", type=self.fileMustExist,
                help="Path to the input problem file.", metavar="IN_FILE")
        parser.add_argument(dest="out_file", help="Path to the output file.",
                metavar="OUT_FILE")
        self.args = parser.parse_args()

    def extract_simulation_paths(self):
        '''Extract the temp file path and Hopping Dynamics script path from the 
        problem file.'''
        # TODO implement
        pass

    def simulation_process(self):
        '''Execute the simulation process. For simplicity of initial 
        implementation, each physics engine operate as if they were invoked 
        normally by SiQAD without class resource sharing - all communications 
        are performed through file write-outs.'''
        
        # TODO execute PoisSolver
        # TODO translate PoisSolver output
        # TODO execute Hopping Dynamics

        pass

    def pois_output_to_json(self):
        '''Translate the PoisSolver DB location potentials to JSON and add the 
        JSON file path to the simulation problem file.'''
        
        pass
