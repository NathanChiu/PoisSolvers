# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_phys_connector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_phys_connector')
    _phys_connector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_phys_connector', [dirname(__file__)])
        except ImportError:
            import _phys_connector
            return _phys_connector
        try:
            _mod = imp.load_module('_phys_connector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _phys_connector = swig_import_helper()
    del swig_import_helper
else:
    import _phys_connector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _phys_connector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _phys_connector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _phys_connector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _phys_connector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _phys_connector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _phys_connector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _phys_connector.SwigPyIterator_copy(self)

    def next(self):
        return _phys_connector.SwigPyIterator_next(self)

    def __next__(self):
        return _phys_connector.SwigPyIterator___next__(self)

    def previous(self):
        return _phys_connector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _phys_connector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _phys_connector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _phys_connector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _phys_connector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _phys_connector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _phys_connector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _phys_connector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _phys_connector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _phys_connector.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _phys_connector.IntVector___nonzero__(self)

    def __bool__(self):
        return _phys_connector.IntVector___bool__(self)

    def __len__(self):
        return _phys_connector.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _phys_connector.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _phys_connector.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _phys_connector.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _phys_connector.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _phys_connector.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _phys_connector.IntVector___setitem__(self, *args)

    def pop(self):
        return _phys_connector.IntVector_pop(self)

    def append(self, x):
        return _phys_connector.IntVector_append(self, x)

    def empty(self):
        return _phys_connector.IntVector_empty(self)

    def size(self):
        return _phys_connector.IntVector_size(self)

    def swap(self, v):
        return _phys_connector.IntVector_swap(self, v)

    def begin(self):
        return _phys_connector.IntVector_begin(self)

    def end(self):
        return _phys_connector.IntVector_end(self)

    def rbegin(self):
        return _phys_connector.IntVector_rbegin(self)

    def rend(self):
        return _phys_connector.IntVector_rend(self)

    def clear(self):
        return _phys_connector.IntVector_clear(self)

    def get_allocator(self):
        return _phys_connector.IntVector_get_allocator(self)

    def pop_back(self):
        return _phys_connector.IntVector_pop_back(self)

    def erase(self, *args):
        return _phys_connector.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _phys_connector.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _phys_connector.IntVector_push_back(self, x)

    def front(self):
        return _phys_connector.IntVector_front(self)

    def back(self):
        return _phys_connector.IntVector_back(self)

    def assign(self, n, x):
        return _phys_connector.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _phys_connector.IntVector_resize(self, *args)

    def insert(self, *args):
        return _phys_connector.IntVector_insert(self, *args)

    def reserve(self, n):
        return _phys_connector.IntVector_reserve(self, n)

    def capacity(self):
        return _phys_connector.IntVector_capacity(self)
    __swig_destroy__ = _phys_connector.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _phys_connector.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _phys_connector.new_StringPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _phys_connector.StringPair_first_set
    __swig_getmethods__["first"] = _phys_connector.StringPair_first_get
    if _newclass:
        first = _swig_property(_phys_connector.StringPair_first_get, _phys_connector.StringPair_first_set)
    __swig_setmethods__["second"] = _phys_connector.StringPair_second_set
    __swig_getmethods__["second"] = _phys_connector.StringPair_second_get
    if _newclass:
        second = _swig_property(_phys_connector.StringPair_second_get, _phys_connector.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _phys_connector.delete_StringPair
    __del__ = lambda self: None
StringPair_swigregister = _phys_connector.StringPair_swigregister
StringPair_swigregister(StringPair)

class StringPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _phys_connector.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _phys_connector.StringPairVector___nonzero__(self)

    def __bool__(self):
        return _phys_connector.StringPairVector___bool__(self)

    def __len__(self):
        return _phys_connector.StringPairVector___len__(self)

    def __getslice__(self, i, j):
        return _phys_connector.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _phys_connector.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _phys_connector.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _phys_connector.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _phys_connector.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _phys_connector.StringPairVector___setitem__(self, *args)

    def pop(self):
        return _phys_connector.StringPairVector_pop(self)

    def append(self, x):
        return _phys_connector.StringPairVector_append(self, x)

    def empty(self):
        return _phys_connector.StringPairVector_empty(self)

    def size(self):
        return _phys_connector.StringPairVector_size(self)

    def swap(self, v):
        return _phys_connector.StringPairVector_swap(self, v)

    def begin(self):
        return _phys_connector.StringPairVector_begin(self)

    def end(self):
        return _phys_connector.StringPairVector_end(self)

    def rbegin(self):
        return _phys_connector.StringPairVector_rbegin(self)

    def rend(self):
        return _phys_connector.StringPairVector_rend(self)

    def clear(self):
        return _phys_connector.StringPairVector_clear(self)

    def get_allocator(self):
        return _phys_connector.StringPairVector_get_allocator(self)

    def pop_back(self):
        return _phys_connector.StringPairVector_pop_back(self)

    def erase(self, *args):
        return _phys_connector.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _phys_connector.new_StringPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _phys_connector.StringPairVector_push_back(self, x)

    def front(self):
        return _phys_connector.StringPairVector_front(self)

    def back(self):
        return _phys_connector.StringPairVector_back(self)

    def assign(self, n, x):
        return _phys_connector.StringPairVector_assign(self, n, x)

    def resize(self, *args):
        return _phys_connector.StringPairVector_resize(self, *args)

    def insert(self, *args):
        return _phys_connector.StringPairVector_insert(self, *args)

    def reserve(self, n):
        return _phys_connector.StringPairVector_reserve(self, n)

    def capacity(self):
        return _phys_connector.StringPairVector_capacity(self)
    __swig_destroy__ = _phys_connector.delete_StringPairVector
    __del__ = lambda self: None
StringPairVector_swigregister = _phys_connector.StringPairVector_swigregister
StringPairVector_swigregister(StringPairVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _phys_connector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _phys_connector.StringVector___nonzero__(self)

    def __bool__(self):
        return _phys_connector.StringVector___bool__(self)

    def __len__(self):
        return _phys_connector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _phys_connector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _phys_connector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _phys_connector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _phys_connector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _phys_connector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _phys_connector.StringVector___setitem__(self, *args)

    def pop(self):
        return _phys_connector.StringVector_pop(self)

    def append(self, x):
        return _phys_connector.StringVector_append(self, x)

    def empty(self):
        return _phys_connector.StringVector_empty(self)

    def size(self):
        return _phys_connector.StringVector_size(self)

    def swap(self, v):
        return _phys_connector.StringVector_swap(self, v)

    def begin(self):
        return _phys_connector.StringVector_begin(self)

    def end(self):
        return _phys_connector.StringVector_end(self)

    def rbegin(self):
        return _phys_connector.StringVector_rbegin(self)

    def rend(self):
        return _phys_connector.StringVector_rend(self)

    def clear(self):
        return _phys_connector.StringVector_clear(self)

    def get_allocator(self):
        return _phys_connector.StringVector_get_allocator(self)

    def pop_back(self):
        return _phys_connector.StringVector_pop_back(self)

    def erase(self, *args):
        return _phys_connector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _phys_connector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _phys_connector.StringVector_push_back(self, x)

    def front(self):
        return _phys_connector.StringVector_front(self)

    def back(self):
        return _phys_connector.StringVector_back(self)

    def assign(self, n, x):
        return _phys_connector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _phys_connector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _phys_connector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _phys_connector.StringVector_reserve(self, n)

    def capacity(self):
        return _phys_connector.StringVector_capacity(self)
    __swig_destroy__ = _phys_connector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _phys_connector.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _phys_connector.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _phys_connector.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _phys_connector.StringVector2D___bool__(self)

    def __len__(self):
        return _phys_connector.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _phys_connector.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _phys_connector.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _phys_connector.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _phys_connector.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _phys_connector.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _phys_connector.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _phys_connector.StringVector2D_pop(self)

    def append(self, x):
        return _phys_connector.StringVector2D_append(self, x)

    def empty(self):
        return _phys_connector.StringVector2D_empty(self)

    def size(self):
        return _phys_connector.StringVector2D_size(self)

    def swap(self, v):
        return _phys_connector.StringVector2D_swap(self, v)

    def begin(self):
        return _phys_connector.StringVector2D_begin(self)

    def end(self):
        return _phys_connector.StringVector2D_end(self)

    def rbegin(self):
        return _phys_connector.StringVector2D_rbegin(self)

    def rend(self):
        return _phys_connector.StringVector2D_rend(self)

    def clear(self):
        return _phys_connector.StringVector2D_clear(self)

    def get_allocator(self):
        return _phys_connector.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _phys_connector.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _phys_connector.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _phys_connector.new_StringVector2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _phys_connector.StringVector2D_push_back(self, x)

    def front(self):
        return _phys_connector.StringVector2D_front(self)

    def back(self):
        return _phys_connector.StringVector2D_back(self)

    def assign(self, n, x):
        return _phys_connector.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _phys_connector.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _phys_connector.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _phys_connector.StringVector2D_reserve(self, n)

    def capacity(self):
        return _phys_connector.StringVector2D_capacity(self)
    __swig_destroy__ = _phys_connector.delete_StringVector2D
    __del__ = lambda self: None
StringVector2D_swigregister = _phys_connector.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _phys_connector.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _phys_connector.StringMap___nonzero__(self)

    def __bool__(self):
        return _phys_connector.StringMap___bool__(self)

    def __len__(self):
        return _phys_connector.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _phys_connector.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _phys_connector.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _phys_connector.StringMap_has_key(self, key)

    def keys(self):
        return _phys_connector.StringMap_keys(self)

    def values(self):
        return _phys_connector.StringMap_values(self)

    def items(self):
        return _phys_connector.StringMap_items(self)

    def __contains__(self, key):
        return _phys_connector.StringMap___contains__(self, key)

    def key_iterator(self):
        return _phys_connector.StringMap_key_iterator(self)

    def value_iterator(self):
        return _phys_connector.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _phys_connector.StringMap___setitem__(self, *args)

    def asdict(self):
        return _phys_connector.StringMap_asdict(self)

    def __init__(self, *args):
        this = _phys_connector.new_StringMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _phys_connector.StringMap_empty(self)

    def size(self):
        return _phys_connector.StringMap_size(self)

    def swap(self, v):
        return _phys_connector.StringMap_swap(self, v)

    def begin(self):
        return _phys_connector.StringMap_begin(self)

    def end(self):
        return _phys_connector.StringMap_end(self)

    def rbegin(self):
        return _phys_connector.StringMap_rbegin(self)

    def rend(self):
        return _phys_connector.StringMap_rend(self)

    def clear(self):
        return _phys_connector.StringMap_clear(self)

    def get_allocator(self):
        return _phys_connector.StringMap_get_allocator(self)

    def count(self, x):
        return _phys_connector.StringMap_count(self, x)

    def erase(self, *args):
        return _phys_connector.StringMap_erase(self, *args)

    def find(self, x):
        return _phys_connector.StringMap_find(self, x)

    def lower_bound(self, x):
        return _phys_connector.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _phys_connector.StringMap_upper_bound(self, x)
    __swig_destroy__ = _phys_connector.delete_StringMap
    __del__ = lambda self: None
StringMap_swigregister = _phys_connector.StringMap_swigregister
StringMap_swigregister(StringMap)

class DBDot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBDot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBDot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _phys_connector.DBDot_x_set
    __swig_getmethods__["x"] = _phys_connector.DBDot_x_get
    if _newclass:
        x = _swig_property(_phys_connector.DBDot_x_get, _phys_connector.DBDot_x_set)
    __swig_setmethods__["y"] = _phys_connector.DBDot_y_set
    __swig_getmethods__["y"] = _phys_connector.DBDot_y_get
    if _newclass:
        y = _swig_property(_phys_connector.DBDot_y_get, _phys_connector.DBDot_y_set)
    __swig_setmethods__["elec"] = _phys_connector.DBDot_elec_set
    __swig_getmethods__["elec"] = _phys_connector.DBDot_elec_get
    if _newclass:
        elec = _swig_property(_phys_connector.DBDot_elec_get, _phys_connector.DBDot_elec_set)

    def __init__(self, in_x, in_y, in_e):
        this = _phys_connector.new_DBDot(in_x, in_y, in_e)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _phys_connector.delete_DBDot
    __del__ = lambda self: None
DBDot_swigregister = _phys_connector.DBDot_swigregister
DBDot_swigregister(DBDot)

class DBIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBIterator, name)
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        this = _phys_connector.new_DBIterator(root, begin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _phys_connector.DBIterator___eq__(self, other)

    def __ne__(self, other):
        return _phys_connector.DBIterator___ne__(self, other)

    def __ref__(self):
        return _phys_connector.DBIterator___ref__(self)

    def setCollection(self, coll):
        return _phys_connector.DBIterator_setCollection(self, coll)
    __swig_setmethods__["collection"] = _phys_connector.DBIterator_collection_set
    __swig_getmethods__["collection"] = _phys_connector.DBIterator_collection_get
    if _newclass:
        collection = _swig_property(_phys_connector.DBIterator_collection_get, _phys_connector.DBIterator_collection_set)

    def __iter__(self):
        return _phys_connector.DBIterator___iter__(self)

    def __next__(self):
      db = _phys_connector.DBIterator___next__(self)
      if db == None:
        raise StopIteration
      else:
        return db


    __swig_destroy__ = _phys_connector.delete_DBIterator
    __del__ = lambda self: None
DBIterator_swigregister = _phys_connector.DBIterator_swigregister
DBIterator_swigregister(DBIterator)

class DBCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBCollection, name)
    __repr__ = _swig_repr

    def __init__(self, db_tree_in):
        this = _phys_connector.new_DBCollection(db_tree_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _phys_connector.DBCollection_begin(self)

    def end(self):
        return _phys_connector.DBCollection_end(self)
    __swig_setmethods__["db_tree_inner"] = _phys_connector.DBCollection_db_tree_inner_set
    __swig_getmethods__["db_tree_inner"] = _phys_connector.DBCollection_db_tree_inner_get
    if _newclass:
        db_tree_inner = _swig_property(_phys_connector.DBCollection_db_tree_inner_get, _phys_connector.DBCollection_db_tree_inner_set)

    def __iter__(self):
        return _phys_connector.DBCollection___iter__(self)
    __swig_destroy__ = _phys_connector.delete_DBCollection
    __del__ = lambda self: None
DBCollection_swigregister = _phys_connector.DBCollection_swigregister
DBCollection_swigregister(DBCollection)

class Electrode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Electrode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Electrode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer_id"] = _phys_connector.Electrode_layer_id_set
    __swig_getmethods__["layer_id"] = _phys_connector.Electrode_layer_id_get
    if _newclass:
        layer_id = _swig_property(_phys_connector.Electrode_layer_id_get, _phys_connector.Electrode_layer_id_set)
    __swig_setmethods__["x1"] = _phys_connector.Electrode_x1_set
    __swig_getmethods__["x1"] = _phys_connector.Electrode_x1_get
    if _newclass:
        x1 = _swig_property(_phys_connector.Electrode_x1_get, _phys_connector.Electrode_x1_set)
    __swig_setmethods__["x2"] = _phys_connector.Electrode_x2_set
    __swig_getmethods__["x2"] = _phys_connector.Electrode_x2_get
    if _newclass:
        x2 = _swig_property(_phys_connector.Electrode_x2_get, _phys_connector.Electrode_x2_set)
    __swig_setmethods__["y1"] = _phys_connector.Electrode_y1_set
    __swig_getmethods__["y1"] = _phys_connector.Electrode_y1_get
    if _newclass:
        y1 = _swig_property(_phys_connector.Electrode_y1_get, _phys_connector.Electrode_y1_set)
    __swig_setmethods__["y2"] = _phys_connector.Electrode_y2_set
    __swig_getmethods__["y2"] = _phys_connector.Electrode_y2_get
    if _newclass:
        y2 = _swig_property(_phys_connector.Electrode_y2_get, _phys_connector.Electrode_y2_set)
    __swig_setmethods__["potential"] = _phys_connector.Electrode_potential_set
    __swig_getmethods__["potential"] = _phys_connector.Electrode_potential_get
    if _newclass:
        potential = _swig_property(_phys_connector.Electrode_potential_get, _phys_connector.Electrode_potential_set)
    __swig_setmethods__["electrode_type"] = _phys_connector.Electrode_electrode_type_set
    __swig_getmethods__["electrode_type"] = _phys_connector.Electrode_electrode_type_get
    if _newclass:
        electrode_type = _swig_property(_phys_connector.Electrode_electrode_type_get, _phys_connector.Electrode_electrode_type_set)
    __swig_setmethods__["pixel_per_angstrom"] = _phys_connector.Electrode_pixel_per_angstrom_set
    __swig_getmethods__["pixel_per_angstrom"] = _phys_connector.Electrode_pixel_per_angstrom_get
    if _newclass:
        pixel_per_angstrom = _swig_property(_phys_connector.Electrode_pixel_per_angstrom_get, _phys_connector.Electrode_pixel_per_angstrom_set)

    def __init__(self, in_layer_id, in_x1, in_x2, in_y1, in_y2, in_potential, in_electrode_type, in_pixel_per_angstrom):
        this = _phys_connector.new_Electrode(in_layer_id, in_x1, in_x2, in_y1, in_y2, in_potential, in_electrode_type, in_pixel_per_angstrom)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _phys_connector.delete_Electrode
    __del__ = lambda self: None
Electrode_swigregister = _phys_connector.Electrode_swigregister
Electrode_swigregister(Electrode)

class ElecIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElecIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElecIterator, name)
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        this = _phys_connector.new_ElecIterator(root, begin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _phys_connector.ElecIterator___eq__(self, other)

    def __ne__(self, other):
        return _phys_connector.ElecIterator___ne__(self, other)

    def __ref__(self):
        return _phys_connector.ElecIterator___ref__(self)

    def setCollection(self, coll):
        return _phys_connector.ElecIterator_setCollection(self, coll)
    __swig_setmethods__["collection"] = _phys_connector.ElecIterator_collection_set
    __swig_getmethods__["collection"] = _phys_connector.ElecIterator_collection_get
    if _newclass:
        collection = _swig_property(_phys_connector.ElecIterator_collection_get, _phys_connector.ElecIterator_collection_set)

    def __iter__(self):
        return _phys_connector.ElecIterator___iter__(self)

    def __next__(self):
      elec = _phys_connector.ElecIterator___next__(self)
      if elec == None:
        raise StopIteration
      else:
        return elec


    __swig_destroy__ = _phys_connector.delete_ElecIterator
    __del__ = lambda self: None
ElecIterator_swigregister = _phys_connector.ElecIterator_swigregister
ElecIterator_swigregister(ElecIterator)

class ElectrodeCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectrodeCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectrodeCollection, name)
    __repr__ = _swig_repr

    def __init__(self, elec_tree_in):
        this = _phys_connector.new_ElectrodeCollection(elec_tree_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _phys_connector.ElectrodeCollection_begin(self)

    def end(self):
        return _phys_connector.ElectrodeCollection_end(self)
    __swig_setmethods__["elec_tree_inner"] = _phys_connector.ElectrodeCollection_elec_tree_inner_set
    __swig_getmethods__["elec_tree_inner"] = _phys_connector.ElectrodeCollection_elec_tree_inner_get
    if _newclass:
        elec_tree_inner = _swig_property(_phys_connector.ElectrodeCollection_elec_tree_inner_get, _phys_connector.ElectrodeCollection_elec_tree_inner_set)

    def __iter__(self):
        return _phys_connector.ElectrodeCollection___iter__(self)
    __swig_destroy__ = _phys_connector.delete_ElectrodeCollection
    __del__ = lambda self: None
ElectrodeCollection_swigregister = _phys_connector.ElectrodeCollection_swigregister
ElectrodeCollection_swigregister(ElectrodeCollection)

class Aggregate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aggregate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Aggregate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["aggs"] = _phys_connector.Aggregate_aggs_set
    __swig_getmethods__["aggs"] = _phys_connector.Aggregate_aggs_get
    if _newclass:
        aggs = _swig_property(_phys_connector.Aggregate_aggs_get, _phys_connector.Aggregate_aggs_set)
    __swig_setmethods__["dbs"] = _phys_connector.Aggregate_dbs_set
    __swig_getmethods__["dbs"] = _phys_connector.Aggregate_dbs_get
    if _newclass:
        dbs = _swig_property(_phys_connector.Aggregate_dbs_get, _phys_connector.Aggregate_dbs_set)
    __swig_setmethods__["elecs"] = _phys_connector.Aggregate_elecs_set
    __swig_getmethods__["elecs"] = _phys_connector.Aggregate_elecs_get
    if _newclass:
        elecs = _swig_property(_phys_connector.Aggregate_elecs_get, _phys_connector.Aggregate_elecs_set)

    def size(self):
        return _phys_connector.Aggregate_size(self)

    def __init__(self):
        this = _phys_connector.new_Aggregate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _phys_connector.delete_Aggregate
    __del__ = lambda self: None
Aggregate_swigregister = _phys_connector.Aggregate_swigregister
Aggregate_swigregister(Aggregate)

class PhysicsConnector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicsConnector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicsConnector, name)
    __repr__ = _swig_repr

    def __init__(self, eng_name_in, input_path_in, output_path_in):
        this = _phys_connector.new_PhysicsConnector(eng_name_in, input_path_in, output_path_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _phys_connector.delete_PhysicsConnector
    __del__ = lambda self: None

    def writeResultsXml(self):
        return _phys_connector.PhysicsConnector_writeResultsXml(self)

    def initProblem(self):
        return _phys_connector.PhysicsConnector_initProblem(self)

    def initCollections(self):
        return _phys_connector.PhysicsConnector_initCollections(self)

    def readProblem(self):
        return _phys_connector.PhysicsConnector_readProblem(self)

    def setRequiredSimParam(self, param_name):
        return _phys_connector.PhysicsConnector_setRequiredSimParam(self, param_name)

    def setExpectElectrode(self, set_val):
        return _phys_connector.PhysicsConnector_setExpectElectrode(self, set_val)

    def setExpectDB(self, set_val):
        return _phys_connector.PhysicsConnector_setExpectDB(self, set_val)

    def setExpectAFMPath(self, set_val):
        return _phys_connector.PhysicsConnector_setExpectAFMPath(self, set_val)

    def setExportElecPotential(self, set_val):
        return _phys_connector.PhysicsConnector_setExportElecPotential(self, set_val)

    def setExportDBChargeConfig(self, set_val):
        return _phys_connector.PhysicsConnector_setExportDBChargeConfig(self, set_val)

    def setExportElectrode(self, set_val):
        return _phys_connector.PhysicsConnector_setExportElectrode(self, set_val)

    def setExportDBLoc(self, set_val):
        return _phys_connector.PhysicsConnector_setExportDBLoc(self, set_val)

    def setExport(self, *args):
        return _phys_connector.PhysicsConnector_setExport(self, *args)

    def setElecPotentialData(self, data_in):
        return _phys_connector.PhysicsConnector_setElecPotentialData(self, data_in)

    def setElectrodeData(self, data_in):
        return _phys_connector.PhysicsConnector_setElectrodeData(self, data_in)

    def setDBLocData(self, data_in):
        return _phys_connector.PhysicsConnector_setDBLocData(self, data_in)

    def setDBChargeData(self, data_in):
        return _phys_connector.PhysicsConnector_setDBChargeData(self, data_in)

    def getRequiredSimParam(self):
        return _phys_connector.PhysicsConnector_getRequiredSimParam(self)

    def parameterExists(self, key):
        return _phys_connector.PhysicsConnector_parameterExists(self, key)

    def getParameter(self, key):
        return _phys_connector.PhysicsConnector_getParameter(self, key)

    def setOutputPath(self, path):
        return _phys_connector.PhysicsConnector_setOutputPath(self, path)

    def getOutputPath(self):
        return _phys_connector.PhysicsConnector_getOutputPath(self)

    def getInputPath(self):
        return _phys_connector.PhysicsConnector_getInputPath(self)

    def getProperty(self, identifier):
        return _phys_connector.PhysicsConnector_getProperty(self, identifier)
    __swig_setmethods__["pot_data"] = _phys_connector.PhysicsConnector_pot_data_set
    __swig_getmethods__["pot_data"] = _phys_connector.PhysicsConnector_pot_data_get
    if _newclass:
        pot_data = _swig_property(_phys_connector.PhysicsConnector_pot_data_get, _phys_connector.PhysicsConnector_pot_data_set)
    __swig_setmethods__["elec_data"] = _phys_connector.PhysicsConnector_elec_data_set
    __swig_getmethods__["elec_data"] = _phys_connector.PhysicsConnector_elec_data_get
    if _newclass:
        elec_data = _swig_property(_phys_connector.PhysicsConnector_elec_data_get, _phys_connector.PhysicsConnector_elec_data_set)
    __swig_setmethods__["dbl_data"] = _phys_connector.PhysicsConnector_dbl_data_set
    __swig_getmethods__["dbl_data"] = _phys_connector.PhysicsConnector_dbl_data_get
    if _newclass:
        dbl_data = _swig_property(_phys_connector.PhysicsConnector_dbl_data_get, _phys_connector.PhysicsConnector_dbl_data_set)
    __swig_setmethods__["db_charge_data"] = _phys_connector.PhysicsConnector_db_charge_data_set
    __swig_getmethods__["db_charge_data"] = _phys_connector.PhysicsConnector_db_charge_data_get
    if _newclass:
        db_charge_data = _swig_property(_phys_connector.PhysicsConnector_db_charge_data_get, _phys_connector.PhysicsConnector_db_charge_data_set)
    __swig_setmethods__["db_locs"] = _phys_connector.PhysicsConnector_db_locs_set
    __swig_getmethods__["db_locs"] = _phys_connector.PhysicsConnector_db_locs_get
    if _newclass:
        db_locs = _swig_property(_phys_connector.PhysicsConnector_db_locs_get, _phys_connector.PhysicsConnector_db_locs_set)
    __swig_setmethods__["db_charges"] = _phys_connector.PhysicsConnector_db_charges_set
    __swig_getmethods__["db_charges"] = _phys_connector.PhysicsConnector_db_charges_get
    if _newclass:
        db_charges = _swig_property(_phys_connector.PhysicsConnector_db_charges_get, _phys_connector.PhysicsConnector_db_charges_set)
    __swig_setmethods__["elec_col"] = _phys_connector.PhysicsConnector_elec_col_set
    __swig_getmethods__["elec_col"] = _phys_connector.PhysicsConnector_elec_col_get
    if _newclass:
        elec_col = _swig_property(_phys_connector.PhysicsConnector_elec_col_get, _phys_connector.PhysicsConnector_elec_col_set)
    __swig_setmethods__["db_col"] = _phys_connector.PhysicsConnector_db_col_set
    __swig_getmethods__["db_col"] = _phys_connector.PhysicsConnector_db_col_get
    if _newclass:
        db_col = _swig_property(_phys_connector.PhysicsConnector_db_col_get, _phys_connector.PhysicsConnector_db_col_set)

    def setExport(self, *args, **kwargs):
      for key in kwargs:
        if key == "db_loc":
          self.setDBLocData(StringPairVector(self.tuplify(kwargs[key])))
        if key == "db_charge":
          self.setDBChargeData(StringPairVector(self.tuplify(kwargs[key])))
        if key == "potential":
          self.setElecPotentialData(StringVector2D(self.tuplify(kwargs[key])))


    def getSimProps(self, key):
      if key == "electrodes":
        elecs = []
        m_per_A = 1.0E-10
        for elec in self.elec_col:
          elec_curr = {"x1":float(elec.x1), "x2":float(elec.x2), "y1":float(elec.y1), "y2":float(elec.y2), \
                       "potential":float(elec.potential),"layer_id":int(elec.layer_id), \
                       "electrode_type":int(elec.electrode_type), "pixel_per_angstrom":float(elec.pixel_per_angstrom)}
          elec_curr["x1"] *= m_per_A/float(elec.pixel_per_angstrom)
          elec_curr["x2"] *= m_per_A/float(elec.pixel_per_angstrom)
          elec_curr["y1"] *= m_per_A/float(elec.pixel_per_angstrom)
          elec_curr["y2"] *= m_per_A/float(elec.pixel_per_angstrom)
          elecs.append(elec_curr)
        return elecs
      elif key == "parameters":
        sim_keys = ["bcs", "high_pot", "image_resolution", "low_pot", "max_abs_error",\
                    "max_linear_iters", "max_rel_error", "mode", "sim_resolution", \
                    "slice_depth", "steps"]
        sim_params = {}
        for key in sim_keys:
          sim_params[key] = self.getParameter(key)
        return sim_params
      else:
        return


    def exportElecPotentialData(self, data_in):
      self.setElecPotentialData(StringVector2D(self.tuplify(data_in)))


    def exportDBChargeData(self, data_in):
      self.setDBChargeData(StringPairVector(self.tuplify(data_in)))


    def exportDBLocData(self, data_in):
      self.setDBLocData(StringPairVector(self.tuplify(data_in)))


    def tuplify(self, data):
      if hasattr(data,'__iter__') and not hasattr(data, "strip"):
        return tuple(self.tuplify(i) for i in data)
      else:
        return str(data)

PhysicsConnector_swigregister = _phys_connector.PhysicsConnector_swigregister
PhysicsConnector_swigregister(PhysicsConnector)

# This file is compatible with both classic and new-style classes.


